<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/4/2019 2:39:15 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="WINDOWS-GTJNM0D"
  DTS:CreatorName="WINDOWS-GTJNM0D\ewhitley"
  DTS:DTSID="{D7997C9F-027E-447E-BE9F-2F72280F27EF}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="1033"
  DTS:ObjectName="query_archive_run_query"
  DTS:PackageType="5"
  DTS:VersionBuild="55"
  DTS:VersionGUID="{B9FA4493-C3E5-41D1-B3E9-38BCD314DC82}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[localhost.query_archive]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{B3BFD724-7744-401B-B697-DDF4C43417CC}"
      DTS:ObjectName="localhost.query_archive">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=localhost;Initial Catalog=query_archive;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[localhost.staging]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{4D5BABE8-C67F-47F4-8CE7-AF8BF1105596}"
      DTS:ObjectName="localhost.staging">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=localhost;Initial Catalog=staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{7B75068E-BDFC-443E-9EFA-B8DCE2974ECA}"
      DTS:ObjectName="query_id">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">1</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2A63C7D1-43EF-4BA4-A017-37957CCEF976}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="catalog_staging">
      <DTS:VariableValue
        DTS:DataType="8">staging</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8CE1F03C-3549-4553-8498-DBE1EBAB4784}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="catalog_target">
      <DTS:VariableValue
        DTS:DataType="8">query_archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C1A34743-44F4-4787-9E74-983A60D21486}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dft_query_connstring">
      <DTS:VariableValue
        DTS:DataType="8">Server=localhost;Database=master;Trusted_Connection=True;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BBF0F8F-34E8-4AD5-9676-E2A2DC088C02}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::schema_name] + &quot;.&quot; +  @[User::table_name_columns]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dft_staging_column_info">
      <DTS:VariableValue
        DTS:DataType="8">query_archive.query_stored_result_columns</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{914694A0-3247-43F5-8D1A-9B86DE4E3F37}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::schema_name] + &quot;.&quot; + @[User::table_name_stored_result]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dft_staging_results">
      <DTS:VariableValue
        DTS:DataType="8">query_archive.query_stored_result</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B7F9156F-241D-4790-AA36-2B554AB1DA50}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="report_config">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{22495788-EF5B-413A-9212-33558CFB38E8}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="report_query">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EAB6228B-AE34-4F1F-9931-A0B07E525EB6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="schema_name">
      <DTS:VariableValue
        DTS:DataType="8">query_archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7C1F82A6-BDA9-475D-8E9F-E5C692D8AD4E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;delete from &quot;+ @[User::schema_name] +&quot;.&quot;+ @[User::table_name_stored_result] +&quot; where query_id = &quot; + (DT_STR,20,1252)@[$Package::query_id]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sql_delete_old_staging_column_info">
      <DTS:VariableValue
        DTS:DataType="8">delete from query_archive.query_stored_result where query_id = 1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{74834ECA-F4C2-4D81-863F-E696E759C5E6}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;delete from &quot;+ @[User::schema_name] +&quot;.&quot;+ @[User::table_name_columns] +&quot; where query_id = &quot; + (DT_STR,20,1252)@[$Package::query_id]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sql_delete_old_staging_results">
      <DTS:VariableValue
        DTS:DataType="8">delete from query_archive.query_stored_result_columns where query_id = 1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FAB7671F-D54C-404F-BED0-93CE63EE706B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;select result_format, query from &quot;+ @[User::schema_name] +&quot;.&quot;+ @[User::table_name_query] +&quot; where query_id = &quot; + (DT_STR,20,1252)@[$Package::query_id]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sql_get_cohort_query">
      <DTS:VariableValue
        DTS:DataType="8">select result_format, query from query_archive.query where query_id = 1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ACFCE7EE-1941-4749-9F91-0F55E4F94297}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;&#xA;set xact_abort on;&#xA;BEGIN TRAN;&#xA;&#xA;declare @query_id int = &quot;+(DT_STR,20,1252)@[$Package::query_id]+&quot;;&#xA;&#xA;delete from &quot;+@[User::catalog_target]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_columns]+&quot; where query_id = @query_id ;&#xA;delete from &quot;+@[User::catalog_target]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_stored_result]+&quot; where query_id = @query_id;&#xA;&#xA;insert into &quot;+@[User::catalog_target]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_columns]+&quot; (query_id, resultset_id, ordinal_position, column_name, data_type)&#xA;select query_id, resultset_id, ordinal_position, column_name, data_type from &quot;+@[User::catalog_staging]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_columns]+&quot; where query_id = @query_id;&#xA;&#xA;insert into &quot;+@[User::catalog_target]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_stored_result]+&quot; (query_id, resultset_id, result_dts, result_data, result_format)&#xA;select query_id, resultset_id, result_dts, result_data, result_format from &quot;+@[User::catalog_staging]+&quot;.&quot;+@[User::schema_name]+&quot;.&quot;+@[User::table_name_stored_result]+&quot; where query_id = @query_id;&#xA;&#xA;COMMIT TRAN;&#xA;&#xA;&#xA;&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sql_update_results_tables">
      <DTS:VariableValue
        DTS:DataType="8">
set xact_abort on;
BEGIN TRAN;

declare @query_id int = 1;

delete from query_archive.query_archive.query_stored_result_columns where query_id = @query_id ;
delete from query_archive.query_archive.query_stored_result where query_id = @query_id;

insert into query_archive.query_archive.query_stored_result_columns (query_id, resultset_id, ordinal_position, column_name, data_type)
select query_id, resultset_id, ordinal_position, column_name, data_type from staging.query_archive.query_stored_result_columns where query_id = @query_id;

insert into query_archive.query_archive.query_stored_result (query_id, resultset_id, result_dts, result_data, result_format)
select query_id, resultset_id, result_dts, result_data, result_format from staging.query_archive.query_stored_result where query_id = @query_id;

COMMIT TRAN;


</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{76EC8698-85F2-4C1B-BEE7-4B33E2BA23E4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="table_name_columns">
      <DTS:VariableValue
        DTS:DataType="8">query_stored_result_columns</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CDCA675D-B3E1-423C-AC79-4028E91BC81F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="table_name_query">
      <DTS:VariableValue
        DTS:DataType="8">query</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3F2BAEE1-54C1-40FA-8755-883766920B15}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="table_name_stored_result">
      <DTS:VariableValue
        DTS:DataType="8">query_stored_result</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{B6CCF44D-A1EA-4FCC-9027-F86B53F4B244}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\Script Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Script Component"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="36">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public resultdataBuffer resultdataBuffer;

    public columndataBuffer columndataBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != resultdataBuffer)
        {
            resultdataBuffer.SetEndOfRowset();
            resultdataBuffer = null;
        }

        if (null != columndataBuffer)
        {
            columndataBuffer.SetEndOfRowset();
            columndataBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"result_data"))
            {
                resultdataBuffer = new resultdataBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"column_data"))
            {
                columndataBuffer = new columndataBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String dftqueryconnstring
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["dft_query_connstring"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 queryid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["query_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Object reportconfig
    {
        get
        {
            return (Object)(ParentComponent.ReadOnlyVariables["report_config"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Object reportquery
    {
        get
        {
            return (Object)(ParentComponent.ReadOnlyVariables["report_query"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Text;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion
//using System.Collections.Generic;
//using Microsoft.SqlServer.Dts.Runtime;
using System.Data.OleDb;

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    string query = "";
    string result_format = "JSON";

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
    }

    public override void CreateNewOutputRows()
    {
        int query_id = Variables.queryid;

        OleDbDataAdapter A = new OleDbDataAdapter();
        System.Data.DataTable dt = new System.Data.DataTable();
        A.Fill(dt, Variables.reportconfig);

        // Iterate through the data table
        foreach (DataRow row in dt.Rows)
        {
            object[] array = row.ItemArray;
            result_format = array[0].ToString();
            query = array[1].ToString();

            //System.Windows.Forms.MessageBox.Show(String.Format("Format: {0}", report_format));
            //System.Windows.Forms.MessageBox.Show(String.Format("Query: {0}", query));
        }

        this.Log(String.Format("Query: {0}", query), 1, null);
        //System.Windows.Forms.MessageBox.Show(String.Format("Query: {0}", query));

        try
        {
            string connstring = Variables.dftqueryconnstring;
            SQLMetadataHelper.SQLResultCollection sr = SQLMetadataHelper.SQLTransformer.GetQueryStructureAndResults(connstring, query, result_format);

            foreach(SQLMetadataHelper.SQLResult r in sr.Results)
            {
                //////////////////////////////////////////////////////////////////////
                // main result channel
                //////////////////////////////////////////////////////////////////////
                resultdataBuffer.AddRow();
                resultdataBuffer.resultsetid = r.ResultsetID;
                resultdataBuffer.resultdata.AddBlobData(System.Text.Encoding.UTF8.GetBytes(r.ResultData));

                resultdataBuffer.queryid = query_id;
                resultdataBuffer.resultformat = result_format;
                //////////////////////////////////////////////////////////////////////

                //////////////////////////////////////////////////////////////////////
                // column list channel
                //////////////////////////////////////////////////////////////////////
                foreach(SQLMetadataHelper.SQLMetadataColumn c in r.SQLMetaData.Columns)
                {
                    columndataBuffer.AddRow();
                    columndataBuffer.queryid = query_id;
                    columndataBuffer.resultsetid = c.ResultsetID;
                    columndataBuffer.ordinalposition = c.ColumnOrdinal;
                    columndataBuffer.columnname = c.TargetColumnName;
                    columndataBuffer.datatype = c.SQLFormattedType;
                }
            }

            //System.Windows.Forms.MessageBox.Show(String.Format("{0}", myData.Item2));


        }
        catch (Exception ex)
        {
            System.Windows.Forms.MessageBox.Show(ex.Message);
        }

    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class resultdataBuffer: ScriptBuffer

{
    public resultdataBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public BlobColumn resultdata
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[0]];
        }
    }
    public bool resultdata_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String resultformat
    {
        set
        {
            this[1] = value;
        }
    }
    public bool resultformat_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 queryid
    {
        set
        {
            this[2] = value;
        }
    }
    public bool queryid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 resultsetid
    {
        set
        {
            this[3] = value;
        }
    }
    public bool resultsetid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class columndataBuffer: ScriptBuffer

{
    public columndataBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String datatype
    {
        set
        {
            this[0] = value;
        }
    }
    public bool datatype_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String columnname
    {
        set
        {
            this[1] = value;
        }
    }
    public bool columnname_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 queryid
    {
        set
        {
            this[2] = value;
        }
    }
    public bool queryid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 resultsetid
    {
        set
        {
            this[3] = value;
        }
    }
    public bool resultsetid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 ordinalposition
    {
        set
        {
            this[4] = value;
        }
    }
    public bool ordinalposition_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a7d2d17555514848bb486fbcceb3810e.Properties.Settings.get_Default():SC_a7d2d17555514848bb486fbcceb3810e.Properties.Sett" +
    "ings")]

namespace SC_a7d2d17555514848bb486fbcceb3810e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[sql_transformer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.Common;
using System.Data;
using System.IO;
using System.Text;

using System.Web.Script.Serialization; //system.web.extensions reference needs to be addeds
using System.Diagnostics;
//you also need System.Data.DataSetExtensions
using System.Reflection;
using System.Xml;

namespace report_storage
{

    class sql_transformer
    {

        public static Tuple<Dictionary<string, string>, string> GetQueryStructureAndResults(string connectionString, string query, string format = "JSON")
        {
            Dictionary<string, string> metadata = new Dictionary<string, string>();
            string resultString = "";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    SqlCommand command = new SqlCommand(query, connection);
                    SqlDataReader reader = command.ExecuteReader();

                    using (var schemaTable = reader.GetSchemaTable())
                    {
                        foreach (DataRow row in schemaTable.Rows)
                        {
                            string ColumnName = row.Field<string>("ColumnName");
                            string DataTypeName = row.Field<string>("DataTypeName");
                            short NumericPrecision = row.Field<short>("NumericPrecision");
                            short NumericScale = row.Field<short>("NumericScale");
                            int ColumnSize = row.Field<int>("ColumnSize");
                            //Console.WriteLine("Column: {0} Type: {1} Precision: {2} Scale: {3} ColumnSize {4}", ColumnName, DataTypeName, NumericPrecision, NumericScale, ColumnSize);

                            string formattedColumnType = "";

                            /*
                            var sqlType = reader.GetDataTypeName(row);
                            var specificType = reader.GetProviderSpecificFieldType(i);
                            dynamic fieldMetaData = new System.Dynamic.ExpandoObject();
                            fieldMetaData.sqlType = sqlType;
                            */

                            switch (DataTypeName)
                            {
                                case "nvarchar":
                                case "varchar":
                                case "char":
                                case "nchar":
                                case "binary":
                                case "varbinary":
                                    formattedColumnType = string.Format("{0}({1})", DataTypeName, ((ColumnSize > 8000) ? "max" : ColumnSize.ToString()));
                                    break;
                                case "datetime2":
                                    formattedColumnType = string.Format("{0}({1})", DataTypeName, NumericScale);
                                    break;
                                case "decimal":
                                case "numeric": //shouldn't really see this as it's intepreted as decimal
                                    formattedColumnType = string.Format("{0}({1},{2})", DataTypeName, NumericPrecision, NumericScale);
                                    break;
                                default:
                                    //int, smalldatetime, uuid, etc. where we don't have lengths
                                    //if we have things like mycatalog.dbo.geography - remove the preface info
                                    formattedColumnType = DataTypeName.Substring(DataTypeName.LastIndexOf('.') + 1);
                                    break;
                            }

                            //Console.WriteLine(formattedColumnType);
                            metadata.Add(ColumnName, formattedColumnType);

                        }
                    }

                    DataTable dt = new DataTable();
                    dt.Load(reader);

                    if (format == "JSON")
                    {
                        resultString = GetJSONFromDataTable(dt);
                    }
                    else if (format == "XML")
                    {
                        resultString = GetXMLFromDataTable(dt);
                    }

                }

            }
            catch (Exception ex)
            {
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                ex.GetType().GetField("_message", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(ex, String.Format("{0}; line: {1}", ex.Message, line));
                throw ex;
            }


            //Console.WriteLine(metadata);

            return Tuple.Create(metadata, resultString);
        }

        static string GetXMLFromDataTable(DataTable dt)
        {
            string resultString = "";
            using (StringWriter sw = new StringWriter())
            {
                dt.WriteXml(sw);
                resultString = sw.ToString();
            }
            return resultString;
        }

        static string GetJSONFromDataTable(DataTable dt)
        {
            string resultString = "";
            System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
            List<Dictionary<string, object>> jsonrows = new List<Dictionary<string, object>>();
            Dictionary<string, object> jsonrow;
            foreach (DataRow dr in dt.Rows)
            {
                jsonrow = new Dictionary<string, object>();
                foreach (DataColumn col in dt.Columns)
                {
                    if (!DBNull.Value.Equals(dr[col]) && !dr.IsNull(col))
                    {
                        jsonrow.Add(col.ColumnName, (col.DataType.Equals(typeof(DateTime)) ? XmlConvert.ToString((DateTime)dr[col]) : dr[col]));
                    }
                }
                jsonrows.Add(jsonrow);
            }
            resultString = serializer.Serialize(jsonrows);
            return resultString;
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_a7d2d17555514848bb486fbcceb3810e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_a7d2d17555514848bb486fbcceb3810e</msb:DisplayName>
    <msb:ProjectId>{B1E5578F-2F1E-4CE9-8CBD-DB54232C04FE}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_a7d2d17555514848bb486fbcceb3810e.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="SQLMetadataHelper.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_a7d2d17555514848bb486fbcceb3810e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_a7d2d17555514848bb486fbcceb3810e")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_a7d2d17555514848bb486fbcceb3810e.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{E52CD720-5B90-49F7-AC13-6DF266A42B5F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_a7d2d17555514848bb486fbcceb3810e</RootNamespace>
    <AssemblyName>SC_a7d2d17555514848bb486fbcceb3810e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="SQLMetadataHelper.cs" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a7d2d17555514848bb486fbcceb3810e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a7d2d17555514848bb486fbcceb3810e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a7d2d17555514848bb486fbcceb3810e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_a7d2d17555514848bb486fbcceb3810e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_a7d2d17555514848bb486fbcceb3810e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SQLMetadataHelper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.Common;
using System.Data;
using System.IO;
//using System.Text;
//using Newtonsoft.Json;  //I would prefer to use this, but it's not available on SQL Server directly
using System.Web.Script.Serialization; //system.web.extensions reference needs to be addeds
using System.Xml;

namespace SQLMetadataHelper
{

    class SQLResultCollection
    {

        private List<SQLResult> _Results;
        public List<SQLResult> Results { get { return _Results; } }

        public SQLResultCollection()
        {
            _Results = new List<SQLResult>();
        }

        public void AddResult(SQLResult result)
        {
            _Results.Add(result);
        }

        public override string ToString()
        {
            //StringBuilder sb = new StringBuilder();
            //foreach(SQLResult sr in Results)
            //{

            //}
            //return sb.ToString();
            return string.Join("\r\n", Results.Select(x => x.ToString()));
        }

    }

    class SQLResult
    {

        private SQLMetadataCollection _SQLMetaData;
        public SQLMetadataCollection SQLMetaData { get { return _SQLMetaData; } }

        public string ResultData;

        private int _ResultsetID;
        public int ResultsetID { get { return _ResultsetID; } }

        public SQLResult(SqlDataReader reader, int source_resultset_id = 1)
        {
            _ResultsetID = source_resultset_id;
            _SQLMetaData = new SQLMetadataCollection();

            //given our reader, add metadata
            using (var schemaTable = reader.GetSchemaTable())
            {
                foreach (DataRow row in schemaTable.Rows)
                {
                    SQLMetaData.AddSchemaDataRow(row, source_resultset_id);
                }
            }
        }

        public override string ToString()
        {
            return string.Format("RESULT SET:{0}\r\nRESULT LENGTH:{1}\r\nMETA:{2}", ResultsetID, ResultData.Length, SQLMetaData.ToString());
        }
    }

    class SQLMetadataCollection
    {
        public SQLMetadataCollection()
        {
            _Columns = new List<SQLMetadataColumn>();
        }

        private int _ResultsetID;
        public int ResultsetID { get { return _ResultsetID; } }

        private List<SQLMetadataColumn> _Columns;
        public List<SQLMetadataColumn> Columns { get { return _Columns; } }

        public void Clear()
        {
            _Columns.Clear();
        }

        public override string ToString()
        {
            return string.Join("\r\n", Columns.Select(x => x.ToString()));
        }

        public void AddSchemaDataRow(DataRow row, int source_data_set_id = 1)
        {
            SQLMetadataColumn column = new SQLMetadataColumn(row, source_data_set_id);

            //generate a name until we have an opening
            bool nameOK = false;
            string proposedName = column.TargetColumnName;
            if (proposedName.Trim().Length <= 0)
            {
                proposedName = String.Format("col_{0}", column.ColumnOrdinal);
            }

            //this is dangerous - we should really review a better strategy for this
            // looping like this to find a hole seems... heavy-handed
            while (nameOK == false)
            {
                int numWithSameName = Columns.Count(p => p.TargetColumnName == proposedName);
                if (numWithSameName == 0)
                {
                    column.TargetColumnName = proposedName;
                    nameOK = true;
                }
                else
                {
                    proposedName = String.Format("{0}_{1}", proposedName, numWithSameName + 1);
                }
            };
            _Columns.Add(column);
        }

        public void AddColumn(SQLMetadataColumn column)
        {
            _Columns.Add(column);
        }

        public Dictionary<string, string> SQLTypeList
        {
            get
            {
                return Columns.ToDictionary(key => key.TargetColumnName, value => value.SQLFormattedType);
            }
        }
    }

    class SQLMetadataColumn
    {

        private int _ResultsetID;
        public int ResultsetID { get { return _ResultsetID; } }


        private string _SourceColumnName;
        public string SourceColumnName { get { return _SourceColumnName; } }

        private string _TargetColumnName;
        public string TargetColumnName
        {
            set { _TargetColumnName = value; }
            get
            {
                return (_TargetColumnName != null && _TargetColumnName.Trim().Length > 0) ? _TargetColumnName : SourceColumnName;
            }
        }

        public bool Renamed
        {
            get
            {
                return SourceColumnName != TargetColumnName;
            }
        }

        private string _SQLFormattedType;
        public string SQLFormattedType { get { return _SQLFormattedType; } }

        private string _DataTypeName;
        public string DataTypeName { get { return _DataTypeName; } }

        private short _NumericPrecision;
        public short NumericPrecision { get { return _NumericPrecision; } }

        private short _NumericScale;
        public short NumericScale { get { return _NumericScale; } }

        private int _ColumnSize;
        public int ColumnSize { get { return _ColumnSize; } }

        private int _ColumnOrdinal;
        public int ColumnOrdinal { get { return _ColumnOrdinal; } }

        private DataRow _Row;
        public DataRow Row
        {
            get { return _Row; }
            set
            {
                _Row = value;
                SetRowData();
            }
        }

        public SQLMetadataColumn(DataRow row, int source_data_set_id = 1)
        {
            Row = row;
            _ResultsetID = source_data_set_id;
        }

        public override string ToString()
        {
            return String.Format("{0} [{1}] : {2}", SourceColumnName, TargetColumnName, SQLFormattedType);
        }

        private void SetRowData()
        {
            _SourceColumnName = Row.Field<string>("ColumnName");
            _TargetColumnName = "";
            _DataTypeName = Row.Field<string>("DataTypeName");
            _NumericPrecision = Row.Field<short>("NumericPrecision");
            _NumericScale = Row.Field<short>("NumericScale");
            _ColumnSize = Row.Field<int>("ColumnSize");

            _ColumnOrdinal = Row.Field<int>("ColumnOrdinal") + 1; //zero-based

            string formattedColumnType = "";

            switch (DataTypeName)
            {
                case "nvarchar":
                case "varchar":
                case "char":
                case "nchar":
                case "binary":
                case "varbinary":
                    formattedColumnType = string.Format("{0}({1})", DataTypeName, ((ColumnSize > 8000) ? "max" : ColumnSize.ToString()));
                    break;
                case "datetime":
                    //converting back to datetime makes SQL unhappy given our fixed date format
                    //for now, just doing this as it works
                    formattedColumnType = string.Format("{0}({1})", "datetime2", 0);
                    break;
                case "datetime2":
                    formattedColumnType = string.Format("{0}({1})", DataTypeName, NumericScale);
                    break;
                case "decimal":
                case "numeric": //shouldn't really see this as it's intepreted as decimal
                    formattedColumnType = string.Format("{0}({1},{2})", DataTypeName, NumericPrecision, NumericScale);
                    break;
                default:
                    //int, smalldatetime, uuid, etc. where we don't have lengths
                    //if we have things like mycatalog.dbo.geography - remove the preface info
                    formattedColumnType = DataTypeName.Substring(DataTypeName.LastIndexOf('.') + 1);
                    break;
            }

            _SQLFormattedType = formattedColumnType;
        }

    }

    class SQLTransformer
    {

        //public static Tuple<Dictionary<string, string>, string> GetQueryStructureAndResults(string connectionString, string query, string format = "JSON")
        public static SQLResultCollection GetQueryStructureAndResults(string connectionString, string query, string format = "JSON")
        {
            Dictionary<string, string> metadata = new Dictionary<string, string>();
            string resultString = "";

            //SQLMetadataCollection sqlCollection = new SQLMetadataCollection();

            SQLResultCollection sqlResultCollection = new SQLResultCollection();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(query, connection);
                //SqlDataReader reader = command.ExecuteReader();

                int source_resultset_id = 1;

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    do
                    {
                        SQLResult sr = new SQLResult(reader, source_resultset_id);

                        DataTable dt = new DataTable();
                        dt.Load(reader);

                        //now that we've potentially renamed our columns in the metdata, we need to make sure
                        //  our datatable column names match. If not? Update them.
                        //  That way, when we emit our JSON, we get the correct matching names
                        //dataTable.Columns["Marks"].ColumnName = "SubjectMarks";
                        foreach (DataColumn c in dt.Columns)
                        {
                            //NOTE: we're offsetting our ordinal position here by +1 because one is zero-based and the other is not
                            string metadata_colname = sr.SQLMetaData.Columns.Where(x => x.ColumnOrdinal == (c.Ordinal + 1)).Select(x => x.TargetColumnName).First();
                            if (c.ColumnName != metadata_colname)
                            {
                                c.ColumnName = metadata_colname;
                            }
                        }

                        if (format == "JSON")
                        {
                            resultString = GetJSONFromDataTable(dt);
                        }
                        else if (format == "XML")
                        {
                            resultString = GetXMLFromDataTable(dt);
                        }

                        sr.ResultData = resultString;

                        sqlResultCollection.AddResult(sr);

                        source_resultset_id = source_resultset_id + 1;

                    } while (!reader.IsClosed);
                    //while (reader.NextResult());
                }
            }

            //return Tuple.Create(sqlCollection.SQLTypeList, resultString);
            return sqlResultCollection;
        }

        static string GetXMLFromDataTable(DataTable dt)
        {
            string resultString = "";
            using (StringWriter sw = new StringWriter())
            {
                dt.WriteXml(sw);
                resultString = sw.ToString();
            }
            return resultString;
        }

        static string GetJSONFromDataTable(DataTable dt)
        {
            string resultString = "";
            System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
            List<Dictionary<string, object>> jsonrows = new List<Dictionary<string, object>>();
            Dictionary<string, object> jsonrow;
            foreach (DataRow dr in dt.Rows)
            {
                jsonrow = new Dictionary<string, object>();
                foreach (DataColumn col in dt.Columns)
                {
                    if (!DBNull.Value.Equals(dr[col]) && !dr.IsNull(col))
                    {

                        jsonrow.Add(col.ColumnName, (col.DataType.Equals(typeof(DateTime)) ? XmlConvert.ToString((DateTime)dr[col]) : dr[col]));
                    }
                }
                jsonrows.Add(jsonrow);
            }
            resultString = serializer.Serialize(jsonrows);
            return resultString;
        }

    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_a7d2d17555514848bb486fbcceb3810e.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
BCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAJQRAAAjfgAAABIAACAQAAAj
U3RyaW5ncwAAAAAgIgAA7AMAACNVUwAMJgAAEAAAACNHVUlEAAAAHCYAAFAFAAAjQmxvYgAAAAAA
AAACAAABVx2iCQkLAAAA+gEzABYAAAEAAABFAAAAFAAAACYAAABkAAAANAAAAHMAAAAEAAAAFgAA
AAkAAAAJAAAAKgAAAC0AAAAKAAAAAQAAAAsAAAABAAAABQAAAAkAAAAAANMHAQAAAAAABgAVBggM
BgCpBggMBgBhBfULDwB8DAAABgCOBZcJBgD4BZcJBgDZBZcJBgCQBpcJBgA1BpcJBgBOBpcJBgCl
BZcJBgDABSkHCgBpBk8EDgB3A9sBBgDEC3UNBgAfDtIIBgCMA9IIBgBZAUcCSwDTCwAABgA5CtII
CgAcC08EEgANC08ECgBiCk8EEgAcCU8ECgCnDk8EBgBEBfULBgAtCygMBgBWCmIJFgAUBb0HFgB1
Bb0HFgD0BE0JBgApBQgMBgBmAdIIDgDICnMODgCmD9sBBgBtAUcCDgAHCnMOBgCGC9EBGgCvC3cJ
DgD/CNsBDgCeCygCDgDoCdsBDgDZBNsBBgBWB9IIBgAgBz0PHgC+Dw4NHgBfDg4NBgApCtIIBgBg
AdIIIgARAF4LIgABAF4LZwBdDwAAIgAiAF4LBgCNBNIIBgCYA9IIBgDfD5cJJgCBA50KBgBLAUcC
DgC7CkMKKgBjDdsBBgB6AdIIDgD6CUMKDgDtAnMODgCvCtsBDgC/CdsBBgCTC9EBBgAACNIIBgBG
BNIILgDmDqwIAAAAAI0BAAAAAAEAAQABABAA7wgAABQAAQABAAEAEAD8CgAAVQADAAUAAQAQAOsK
AABVAAMAEQABABAAiQ4AAGUAAwAfAAEAEACIDQAAQQAHACQAAQAQAMYMAABBAAgAJQAAABAALwyL
DEEACQAqAAABEAD+DIsMfQALAC4AAAAQANQJTAtBAAwAMQAAABAASw5MC0EADQA1AAAAEACpCUwL
QQAQADkAAAAQAAoJTAtBABIAQQAAABAAPQtMC0EAHABRAAABAACWAQAAQQAcAFUAAyEQAEMCAABB
ABwAVgADIRAAQwIAAEEAHgBZAAMBEACmAAAAQQAiAF4AAwEQADoAAABBACQAYAADIRAAQwIAAEEA
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
AAABALoPEBACAJgCAAABADEJAAABAOQGAAABAOQGAAABALoPEBACAJgCAAABAEMHAAACAP8PEBAD
ABgOAAABAC0OAAABAC0OAAABAPcNAAABAMcPAAABAMcPAAABANcPAAABAOQGAAABAJsKAAABAMcP
AAABAMcPCQDeCwEAEQDeCwYAGQDeCwoAKQDeCxAAMQDeCxAAOQDeCxAAQQDeCxAASQDeCxAAUQDe
CxAAWQDeCxAAYQDeCxAAaQDeCwYA0QDeCwYA8QDeCxUAAQHeCwYAyQDHBgYAyQDSBgYASQHeCwYA
cQDeCwYASQH7BzcAcQDcDT4AWQHQC0QAeQC3DkkAGQHJD00AgQBUB1IAeQA0D1YAiQAMBQYAYQH5
DVoAyQB+B2AADADQC28AFAC3Dn8AaQGAAYQAaQHQDIoAwQD3AZAAHADQC28AJAC3Dn8AJAA0D1YA
FAA0D1YAoQAsA1IAcQG1D6QAqQDeC6sAqQAiC7UAqQDZDLkAsQDACL0AqQCdCMIAqQDJCMcAqQCk
CAEAgQHeCxAAqQCuDwYAqQAwDgYAqQAzDlYAyQDeCwYAyQDFAdEAyQDtDNgAgQDeCwYAyQC6DN4A
kQHACOQAyQB4D+sAmQFJD/EAsQGqA/gAsQHbDwEB2QDeCwcB+QDeCwYADADeCwYADABnAg8BLADe
Cx4ByQEmDiQBYQH6CEUB2QFJA1wBYQGUB2EBYQH5DWUBHADeCwYAHACpCgYANADeCx4BYQHZCFIA
PADeCx4ByQHDDpYBYQH5Da8BHABnAg8ByQHoD7YBYQEREOMB4QHnAvABYQEFEOMBiQFUB1IAYQED
BwYCYQFdBwsCRADeCwYAKQHeCxAA8QHqCAYA+QHeCzAC+QHWCjgCcQBiAj4CcQAjDUUCyQGfBEsC
yQEiD2UCQQHaA1IAQQHpAxAA2QGLAlYAMQHeCwYAcQC3CHkCOQHeCwYATADeCwYAVADeCwYAGQLe
BrgCGQHACL0CgQAHDcQCGQGdCMkCQQFwBNACsQEHDdYCKQJUB90CVABnAuQCTABnAg8BOQH5BuwC
YQGUDfYCQQGfB2EBCACBABYDCACJABYDCACdABYDDgCpABsDLgALAIwELgATAJUELgAbALQELgAj
AL0ELgArAOYELgAzAOYELgA7AOYELgBDAL0ELgBLAOwELgBTAOYELgBbAAMFQwBjABYDAwFrABYD
YQF7ABYD4wF7ABYDAwJ7ABYDIwJ7ABYDQwJ7ABYDYwJ7ABYDgwJ7ABYD6QJzALQECQNzALQEGwDN
AFABfAHpARACcgKAAvECAwABAAQACQAHABMACAAXAAkAGQAKABoACwAbAAwAHQANACAAAAAdAj0E
AAALCEIEAAASDkYEAACQCEIEAADfAkoEAAA4CEIEAADDAkoEAAAhCEIEAACWBEYEAABhCEIEAAA7
BEYEAABLCEIEAADfAkoEAAA4CEIEAADDAkoEAAAhCEIEAAAZCkoEAAB1CEIEAABrB0YEAADfAkoE
AAATB04EAAD5D04EAAAtC1IEAADRBFcEAABDDlwEAADGDWEEAADrAWoEAAC5AUoEAAC5AUoEAAAn
DW8EAAD1DngEAAC5AUoEAAD8A0YEAAAmBEYEAACDAkIEAACBBEYEAADNA0YEAAA8CYIEAAA8A4IE
AADuBkoEAACvB0oEAACxD4YEAgAGAAMAAgAHAAUAAQAIAAcAAQAJAAkAAQAKAAsAAQALAA0AAQAM
AA8AAQANABEAAQASABMAAQATABUAAQAUABcAAQAVABkAAQAWABsAAQAXAB0AAQAYAB8AAQAZACEA
AQAaACMAAQAbACUAAgAmACcAAgAnACkAAgAoACsAAgApAC0AAgArAC8AAgAsADEAAQAtADEAAgAu
ADMAAgAxADUAAgA1ADcAAgA2ADkAAgA6ADsAAgA7AD0AAgBAAD8AAgBBAEEAAgBCAEMAAgBEAEUA
AQBDAEUAAgBFAEcAAgBGAEkAAgBHAEsAAgBIAE0AAgBJAE8AAgBKAFEAAgBLAFMAAgBMAFUAAQBN
AFUAaAB4AJYAnQAVAW0BjQEoAqQCsAIEgAAAAQAAAAAAAAAAAAAAAAD4AgAABAAAAAAAAAAAAAAA
+wI6AgAAAAAOAAAAAAAAAAAAAAAEA8kOAAAAAAQAAAAAAAAAAAAAAPsC2wEAAAAADgAAAAAAAAAA
AAAABAMBDwAAAAAEAAAAAAAAAAAAAAD7AtIIAAAAAAQAAAAAAAAAAAAAAA0DLw0AAAAABAAAAAAA
AAAAAAAA+wIODQAAAAAOAAAAAAAAAAAAAAAEA3oKAAAAAAQAAAAAAAAAAAAAAPsCpQQAAAAABAAA
AAAAAAAAAAAA+wJFDQAAAAAEAAAAAAAAAAAAAAD7AqwIAAAAAAAAAAABAAAAOQwAABAACgARAAwA
EgAMABMADgAUAA4AhwA/AYcAdgGbAKoBoQDcAaUA+gGlAP4BpQACAr0AqgG/APoBAAAAAABJRFRT
VmFyaWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMAA8PmNf
X0Rpc3BsYXlDbGFzczBfMAA8PjlfXzEyXzAAPGdldF9TUUxUeXBlTGlzdD5iX18xMl8wADw+OV9f
NV8wADxUb1N0cmluZz5iX181XzAAPD45X184XzAAPFRvU3RyaW5nPmJfXzhfMAA8PmNfX0Rpc3Bs
YXlDbGFzczlfMAA8PjlfXzAAPEdldFF1ZXJ5U3RydWN0dXJlQW5kUmVzdWx0cz5iX18wADxBZGRT
Y2hlbWFEYXRhUm93PmJfXzAAPD45X18wXzEAPEdldFF1ZXJ5U3RydWN0dXJlQW5kUmVzdWx0cz5i
X18wXzEAPD45X18xMl8xADxnZXRfU1FMVHlwZUxpc3Q+Yl9fMTJfMQBJRW51bWVyYWJsZWAxAExp
c3RgMQBJbnQzMgBGdW5jYDIARGljdGlvbmFyeWAyAEludDE2AGdldF9VVEY4ADw+OQA8TW9kdWxl
PgA8UHJpdmF0ZUltcGxlbWVudGF0aW9uRGV0YWlscz4AZ2V0X1Jlc3VsdHNldElEAEdldE91dHB1
dElEAFN5c3RlbS5JTwBTeXN0ZW0uRGF0YQBnZXRfU1FMTWV0YURhdGEAQWRkQmxvYkRhdGEAUmVz
dWx0RGF0YQBTZXRSb3dEYXRhAGdldF9yZXN1bHRkYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29y
bGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBMb2FkAEFkZABNYXJrT3V0cHV0c0Zp
bmlzaGVkAGdldF9SZW5hbWVkAGdldF9Jc0Nsb3NlZABzb3VyY2VfZGF0YV9zZXRfaWQAc291cmNl
X3Jlc3VsdHNldF9pZABzZXRfcmVzdWx0c2V0aWQAZ2V0X3F1ZXJ5aWQAc2V0X3F1ZXJ5aWQARmll
bGQAU3FsQ29tbWFuZABTQ19hN2QyZDE3NTU1NTE0ODQ4YmI0ODZmYmNjZWIzODEwZQBkZWZhdWx0
SW5zdGFuY2UAZ2V0X01lc3NhZ2UAZ2V0X051bWVyaWNTY2FsZQBHZXRTY2hlbWFUYWJsZQBHZXRY
TUxGcm9tRGF0YVRhYmxlAEdldEpTT05Gcm9tRGF0YVRhYmxlAEVudW1lcmFibGUASURpc3Bvc2Fi
bGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAcHJvcG9zZWROYW1lAGdldF9E
YXRhVHlwZU5hbWUAZ2V0X0NvbHVtbk5hbWUAc2V0X0NvbHVtbk5hbWUAZ2V0X1NvdXJjZUNvbHVt
bk5hbWUAZ2V0X1RhcmdldENvbHVtbk5hbWUAc2V0X1RhcmdldENvbHVtbk5hbWUAc2V0X2NvbHVt
bm5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAZ2V0X0RhdGFU
eXBlAGdldF9TUUxGb3JtYXR0ZWRUeXBlAHNldF9kYXRhdHlwZQBXaGVyZQBTeXN0ZW0uQ29yZQBn
ZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUASW50ZXJuYWxEYXRhQ29sbGVj
dGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmli
dXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3Jr
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25l
bnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29t
cGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAFZhbHVlAHZhbHVlAGdl
dF9Db2x1bW5TaXplAFNlcmlhbGl6ZQBMYXN0SW5kZXhPZgBnZXRfcmVwb3J0Y29uZmlnAEVuY29k
aW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAY29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBT
dWJzdHJpbmcAZ2V0X2RmdHF1ZXJ5Y29ubnN0cmluZwBMb2cAQ29tcHV0ZVN0cmluZ0hhc2gAZ2V0
X0xlbmd0aABnZXRfT3JkaW5hbABnZXRfQ29sdW1uT3JkaW5hbABTeXN0ZW0uQ29tcG9uZW50TW9k
ZWwAU0NfYTdkMmQxNzU1NTUxNDg0OGJiNDg2ZmJjY2ViMzgxMGUuZGxsAEZpbGwAREJOdWxsAGdl
dF9yZXN1bHRkYXRhX0lzTnVsbABzZXRfcmVzdWx0c2V0aWRfSXNOdWxsAHNldF9xdWVyeWlkX0lz
TnVsbABzZXRfY29sdW1ubmFtZV9Jc051bGwAc2V0X2RhdGF0eXBlX0lzTnVsbABzZXRfb3JkaW5h
bHBvc2l0aW9uX0lzTnVsbABzZXRfcmVzdWx0Zm9ybWF0X0lzTnVsbABTZXROdWxsAFN5c3RlbS5Y
bWwAV3JpdGVYbWwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAFRyaW0AcmVzb3VyY2VNYW4AT3Bl
bgBTY3JpcHRNYWluAEpvaW4ARGF0YUNvbHVtbgBTUUxNZXRhZGF0YUNvbHVtbgBCbG9iQ29sdW1u
AEFkZENvbHVtbgBjb2x1bW4AZ2V0X051bWVyaWNQcmVjaXNpb24AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLldlYi5TY3JpcHQuU2VyaWFsaXphdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBTUUxNZXRhZGF0YUNvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rp
b24AU1FMUmVzdWx0Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBEYkNvbm5lY3Rpb24AU3Fs
Q29ubmVjdGlvbgBzZXRfb3JkaW5hbHBvc2l0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24A
U3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAAU3lzdGVtLkxpbnEAQ2xlYXIASURhdGFS
ZWFkZXIARGJEYXRhUmVhZGVyAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgByZWFkZXIAY29s
dW1uZGF0YUJ1ZmZlcgByZXN1bHRkYXRhQnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1ZmZl
cgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFNRTFRyYW5zZm9ybWVyAFNRTE1ldGFkYXRhSGVscGVyAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBTdHJpbmdXcml0ZXIAVGV4dFdy
aXRlcgBPbGVEYkRhdGFBZGFwdGVyAEphdmFTY3JpcHRTZXJpYWxpemVyAElFbnVtZXJhdG9yAEdl
dEVudW1lcmF0b3IALmN0b3IALmNjdG9yAE91dHB1dElEcwBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lz
dGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDX2E3ZDJkMTc1
NTU1MTQ4NDhiYjQ4NmZiY2NlYjM4MTBlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBE
ZWJ1Z2dpbmdNb2RlcwBTQ19hN2QyZDE3NTU1NTE0ODQ4YmI0ODZmYmNjZWIzODEwZS5Qcm9wZXJ0
aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBHZXRCeXRlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdl
dENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAGdldF9D
b2x1bW5zAFN5c3RlbS5XZWIuRXh0ZW5zaW9ucwBTeXN0ZW0uRGF0YS5EYXRhU2V0RXh0ZW5zaW9u
cwBEYXRhUm93RXh0ZW5zaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAQ29ubmVjdGlvbnMAZ2V0X0No
YXJzAEJ1ZmZlcnMAZ2V0X1Jlc3VsdHMAR2V0UXVlcnlTdHJ1Y3R1cmVBbmRSZXN1bHRzAEZpbmlz
aE91dHB1dHMAZ2V0X1Jvd3MAQ3JlYXRlTmV3T3V0cHV0Um93cwBGb3JtYXQAcmVzdWx0X2Zvcm1h
dABzZXRfcmVzdWx0Zm9ybWF0AE9iamVjdABTZWxlY3QAZHQAU2V0RW5kT2ZSb3dzZXQAZ2V0X0Rl
ZmF1bHQAU1FMUmVzdWx0AEFkZFJlc3VsdABEaWFsb2dSZXN1bHQAcmVzdWx0AFN5c3RlbS5EYXRh
LlNxbENsaWVudABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQA
Z2V0X0N1cnJlbnQAQ291bnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABYbWxDb252ZXJ0
AGdldF9TUUxUeXBlTGlzdABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABGaXJzdABQ
cmltZU91dHB1dABNb3ZlTmV4dABTeXN0ZW0uVGV4dABHZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlw
dENvbXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AGdldF9Sb3cAc2V0X1Jv
dwBBZGRTY2hlbWFEYXRhUm93AEFkZFJvdwBTaG93AHJvdwBNZXNzYWdlQm94AGdldF9JdGVtQXJy
YXkAa2V5AGdldF9Bc3NlbWJseQBUb0RpY3Rpb25hcnkAZ2V0X3JlcG9ydHF1ZXJ5AG9wX0VxdWFs
aXR5AG9wX0luZXF1YWxpdHkAAAAVUQB1AGUAcgB5ADoAIAB7ADAAfQAAAQAJSgBTAE8ATgAAgJtJ
AHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQA
IAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAg
AHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AABdyAGUAcwB1AGwAdABfAGQA
YQB0AGEAABdjAG8AbAB1AG0AbgBfAGQAYQB0AGEAAClkAGYAdABfAHEAdQBlAHIAeQBfAGMAbwBu
AG4AcwB0AHIAaQBuAGcAABFxAHUAZQByAHkAXwBpAGQAABtyAGUAcABvAHIAdABfAGMAbwBuAGYA
aQBnAAAZcgBlAHAAbwByAHQAXwBxAHUAZQByAHkAAHFTAEMAXwBhADcAZAAyAGQAMQA3ADUANQA1
ADUAMQA0ADgANAA4AGIAYgA0ADgANgBmAGIAYwBjAGUAYgAzADgAMQAwAGUALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAUNAAoAAFdSAEUAUwBVAEwAVAAgAFMARQBU
ADoAewAwAH0ADQAKAFIARQBTAFUATABUACAATABFAE4ARwBUAEgAOgB7ADEAfQANAAoATQBFAFQA
QQA6AHsAMgB9AAAPYwBvAGwAXwB7ADAAfQAAD3sAMAB9AF8AewAxAH0AAB97ADAAfQAgAFsAewAx
AH0AXQAgADoAIAB7ADIAfQAAFUMAbwBsAHUAbQBuAE4AYQBtAGUAABlEAGEAdABhAFQAeQBwAGUA
TgBhAG0AZQAAIU4AdQBtAGUAcgBpAGMAUAByAGUAYwBpAHMAaQBvAG4AABlOAHUAbQBlAHIAaQBj
AFMAYwBhAGwAZQAAFUMAbwBsAHUAbQBuAFMAaQB6AGUAABtDAG8AbAB1AG0AbgBPAHIAZABpAG4A
YQBsAAARbgB2AGEAcgBjAGgAYQByAAAPdgBhAHIAYwBoAGEAcgAACWMAaABhAHIAAAtuAGMAaABh
AHIAAA1iAGkAbgBhAHIAeQAAE3YAYQByAGIAaQBuAGEAcgB5AAARZABhAHQAZQB0AGkAbQBlAAAT
ZABhAHQAZQB0AGkAbQBlADIAAA9kAGUAYwBpAG0AYQBsAAAPbgB1AG0AZQByAGkAYwAAEXsAMAB9
ACgAewAxAH0AKQAAB20AYQB4AAAZewAwAH0AKAB7ADEAfQAsAHsAMgB9ACkAAAdYAE0ATAAAN4gn
+2u0EkuOGrchSngEqAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERdRsHCQgSORI9HRwSRRURTQES
LBIsFRFNARI0EjQGIAIIEjkcBSAAEoCpBCAAEj0DIAAcBCAAHRwDIAAOAyAAAgUAAg4OHAcgAwEO
CB0FBhUSSQESLAggABURTQETAAYVEU0BEiwEIAATAAUAABKAtQUgAR0FDgUgAQEdBQYVEkkBEjQG
FRFNARI0BgABEYC9DgkgAwESWR0IEl0DBhJZAwYdCAQgARwIBCABAggFIAIBCBwDBwEIBgACCBJd
DgUgAR0ICAUgABKAyQYgARKAzRwFAAASgNEGIAEcEoDVCAABEoDZEYDdBSAAEoDhByACAQ4SgOEF
IAEBEwAIFRKAhQISLA4FIAIBHBgaEAICFRKA6QEeARUSgOkBHgAVEoCFAh4AHgEFCgISLA4KAAIO
DhUSgOkBDgsHBBI5Ej0SgI0SRQQgABI5AyAACAcABA4OHBwcCBUSgIUCEjQOBQoCEjQOEAcFEkgS
NAIIFRKAhQISNAIIFRKAhQISNAITEAECCBUSgOkBHgAVEoCFAh4AAgQKARI0BgADDg4cHCUQAwMV
EoCRAh4BHgIVEoDpAR4AFRKAhQIeAB4BFRKAhQIeAB4CBgoDEjQODgUAAgIODgYHBA4OCQgJEAEC
HgASgI0OAwoBDgMKAQYDCgEIBCABCAMEIAEOCBcHCw4SKBKAlQgSgIkSLBI5Ej0STA4SRQcVEoCR
Ag4OByACAQ4SgJUFIAASgIkGIAEBEoEBBSAAEoEFGRABAhUSgOkBHgAVEoDpAR4AFRKAhQIeAAIM
EAEBHgAVEoDpAR4ABgcCDhKAmQYgAQESgQkjBwgSgJ0VEkkBFRKAkQIOHBUSgJECDhwSPRKAjRI9
EoChEkULFRJJARUSgJECDhwHFRKAkQIOHAQGEoENBiABHBKAoQQgAQIcBiABAhKAoQUgABKA2QYg
AQISgNkGAAEOEYERByACARMAEwEEIAEOHAQHAgkIBCABAwgIt3pcVhk04IkIiYRdzYCAzJEIMb84
Vq02TjUEAQAAAAhKAFMATwBOAAIGDgMGEhgDBhIcAwYSDAMGEhADBhJlAwYSbQMGEnEDBhIkBwYV
EkkBEiwDBhIwAgYIBwYVEkkBEjQCBgYEBhKAjQMGEkAJBhUSgIUCEiwOAwYSRAkGFRKAhQISNA4J
BhUSgIUCEjQCBAYSgKEDBhJQBCAAEmEEIAEBAgsgBAEIHQgdElkSXQUgAQESZQQAABJtBAAAEnEF
AAEBEnEEAAASJAMAAAEIIAAVEkkBEiwFIAEBEiwEIAASMAcgAgESgIkICCAAFRJJARI0ByACARKA
jQgFIAEBEjQJIAAVEoCRAg4OAyAABgUgABKAjQYgAQESgI0HAAMSKA4ODgUAAQ4SOQQAAQkOBSAB
DhIsBSABDhI0BSABAhI0BCgAEmEDKAACAygADgMoAAgDKAAcBAgAEm0ECAAScQQIABIkCCgAFRJJ
ARIsBCgAEjAIKAAVEkkBEjQJKAAVEoCRAg4OAygABgUoABKAjQgBAAgAAAAAAB4BAAEAVAIWV3Jh
cE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfYTdkMmQxNzU1NTUxNDg0OGJiNDg2
ZmJjY2ViMzgxMGUAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0
LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1z
Y29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49
Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAA
AAAAAAAAAFBBRFBBRFC0AAAAIFwAAAAAAAAAAAAAOlwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ACxcAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAADsAwAAAAAAAAAAAADs
AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAA
AQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAETAMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBv
AG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwBhADcAZAAyAGQAMQA3
ADUANQA1ADUAMQA0ADgANAA4AGIAYgA0ADgANgBmAGIAYwBjAGUAYgAzADgAMQAwAGUAAAAwAAgA
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABwACgAAQBJAG4AdABl
AHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGEANwBkADIAZAAxADcANQA1ADUANQAxADQAOAA0ADgA
YgBiADQAOAA2AGYAYgBjAGMAZQBiADMAOAAxADAAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBs
AEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA5AAAA
KgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBn
AGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AYQA3AGQAMgBkADEANwA1ADUANQA1ADEA
NAA4ADQAOABiAGIANAA4ADYAZgBiAGMAYwBlAGIAMwA4ADEAMABlAC4AZABsAGwAAABoACQAAQBQ
AHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfAGEANwBkADIAZAAxADcANQA1ADUANQAxADQA
OAA0ADgAYgBiADQAOAA2AGYAYgBjAGMAZQBiADMAOAAxADAAZQAAADQACAABAFAAcgBvAGQAdQBj
AHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkA
IABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAATDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_a7d2d17555514848bb486fbcceb3810e</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::dft_query_connstring,User::report_config,User::report_query,$Package::query_id</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">82</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[result_data]"
                  hasSideEffects="true"
                  name="result_data">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_data]"
                      codePage="1252"
                      dataType="text"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_data]"
                      name="result_data" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_format]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_format]"
                      name="result_format" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[query_id]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[query_id]"
                      name="query_id" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[resultset_id]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[resultset_id]"
                      name="resultset_id" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[column_data]"
                  hasSideEffects="true"
                  name="column_data">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[data_type]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[data_type]"
                      name="data_type" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[column_name]"
                      codePage="1252"
                      dataType="str"
                      length="255"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[column_name]"
                      name="column_name" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[query_id]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[query_id]"
                      name="query_id" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[resultset_id]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[resultset_id]"
                      name="resultset_id" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[ordinal_position]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[ordinal_position]"
                      name="ordinal_position" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\stored_result"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="stored_result"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[temp_files].[cohort_stored_result]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable">User::dft_staging_results</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">1</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\stored_result.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.staging]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.staging]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].Columns[result_data]"
                      cachedCodepage="1252"
                      cachedDataType="text"
                      cachedName="result_data"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[result_data]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_data]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].Columns[result_format]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="result_format"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[result_format]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[result_format]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].Columns[query_id]"
                      cachedDataType="i4"
                      cachedName="query_id"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[query_id]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[query_id]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].Columns[resultset_id]"
                      cachedDataType="i4"
                      cachedName="resultset_id"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[resultset_id]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[result_data].Columns[resultset_id]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[result_dts]"
                      dataType="dbTimeStamp2"
                      name="result_dts" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[result_data]"
                      codePage="1252"
                      dataType="text"
                      name="result_data" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[result_format]"
                      codePage="1252"
                      dataType="str"
                      length="10"
                      name="result_format" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[query_id]"
                      dataType="i4"
                      name="query_id" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input].ExternalColumns[resultset_id]"
                      dataType="i4"
                      name="resultset_id" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\stored_result.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\stored_result.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\stored_result.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\stored_result.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\stored_result.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\stored_result_column"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="stored_result_column"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[temp_files].[cohort_stored_result_columns]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable">User::dft_staging_column_info</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">1</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\stored_result_column.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.staging]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.staging]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].Columns[data_type]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="data_type"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[data_type]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[data_type]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].Columns[column_name]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="255"
                      cachedName="column_name"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[column_name]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[column_name]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].Columns[query_id]"
                      cachedDataType="i4"
                      cachedName="query_id"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[query_id]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[query_id]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].Columns[resultset_id]"
                      cachedDataType="i4"
                      cachedName="resultset_id"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[resultset_id]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[resultset_id]" />
                    <inputColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].Columns[ordinal_position]"
                      cachedDataType="i4"
                      cachedName="ordinal_position"
                      externalMetadataColumnId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[ordinal_position]"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[column_data].Columns[ordinal_position]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[stored_result_column_id]"
                      dataType="i4"
                      name="stored_result_column_id" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[column_name]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="column_name" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[data_type]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="data_type" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[query_id]"
                      dataType="i4"
                      name="query_id" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[resultset_id]"
                      dataType="i4"
                      name="resultset_id" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input].ExternalColumns[ordinal_position]"
                      dataType="i4"
                      name="ordinal_position" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\stored_result_column.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\stored_result_column.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\stored_result_column.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\stored_result_column.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\stored_result_column.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[column_data]"
              endId="Package\Data Flow Task\stored_result_column.Inputs[OLE DB Destination Input]"
              name="column_data"
              startId="Package\Data Flow Task\Script Component.Outputs[column_data]" />
            <path
              refId="Package\Data Flow Task.Paths[result_data]"
              endId="Package\Data Flow Task\stored_result.Inputs[OLE DB Destination Input]"
              name="result_data"
              startId="Package\Data Flow Task\Script Component.Outputs[result_data]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get Config"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{DA6FA1C9-C5D2-420C-9256-1485ECC374F4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get Config"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B3BFD724-7744-401B-B697-DDF4C43417CC}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::sql_get_cohort_query"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::report_config" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\remove old staging column info"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{8C1EDBE5-1B09-4DEF-8A07-0F9ADA4D145D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="remove old staging column info"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{4D5BABE8-C67F-47F4-8CE7-AF8BF1105596}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::sql_delete_old_staging_column_info" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\remove old staging results"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{F792D143-AA33-4B3F-AC8E-A9CA9DC68A3F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="remove old staging results"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{4D5BABE8-C67F-47F4-8CE7-AF8BF1105596}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::sql_delete_old_staging_results" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\update production tables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{BA33F5F0-F56D-4A0D-835D-84E96D162430}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="update production tables"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{4D5BABE8-C67F-47F4-8CE7-AF8BF1105596}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::sql_update_results_tables" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{15447618-267C-4874-B2AE-7CABC49E0BDF}"
      DTS:From="Package\Get Config"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\remove old staging results" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{7F61E231-21AD-42A0-96ED-5B18D343DB15}"
      DTS:From="Package\remove old staging results"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\remove old staging column info" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{33004850-03DB-4CE8-A99B-8B7C8E828DB5}"
      DTS:From="Package\remove old staging column info"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{69B7625A-E98B-4791-AF14-43D78CDE429F}"
      DTS:From="Package\Data Flow Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\update production tables" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="151.5,43"
          Id="Package\Data Flow Task"
          TopLeft="319.607142857143,332.392857039081" />
        <NodeLayout
          Size="129,42"
          Id="Package\Get Config"
          TopLeft="330.857142857143,26.3928570390812" />
        <NodeLayout
          Size="224,42"
          Id="Package\remove old staging column info"
          TopLeft="283.357142857143,230.392857039081" />
        <NodeLayout
          Size="191,42"
          Id="Package\remove old staging results"
          TopLeft="299.857142857143,128.392857039081" />
        <NodeLayout
          Size="194,42"
          Id="Package\update production tables"
          TopLeft="298.357142857143,435.392857039081" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="395.357142857143,68.3928570390812">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="395.357142857143,170.392857039081">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="395.357142857143,272.392857039081">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="395.357142857143,375.392857039081">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="139.5,42"
          Id="Package\Data Flow Task\stored_result"
          TopLeft="119,197.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Data Flow Task\Script Component"
          TopLeft="243,86.5" />
        <NodeLayout
          Size="179.5,42"
          Id="Package\Data Flow Task\stored_result_column"
          TopLeft="362.5,198.5" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[result_data]"
          TopLeft="298.666666666667,128.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-109.916666666667,69"
              Start="0,0"
              End="-109.916666666667,61.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.0024301336574" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.0024301336574"
                    Point2="0,28.0024301336574"
                    Point3="-4,28.0024301336574" />
                  <mssgle:LineSegment
                    End="-105.916666666667,28.0024301336574" />
                  <mssgle:CubicBezierSegment
                    Point1="-105.916666666667,28.0024301336574"
                    Point2="-109.916666666667,28.0024301336574"
                    Point3="-109.916666666667,32.0024301336574" />
                  <mssgle:LineSegment
                    End="-109.916666666667,61.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-79.9933138020835,33.0024301336574,50.0699609375,11.0625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[column_data]"
          TopLeft="350.333333333333,128.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="101.916666666667,70"
              Start="0,0"
              End="101.916666666667,62.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.408262454435" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.408262454435"
                    Point2="0,28.408262454435"
                    Point3="4,28.408262454435" />
                  <mssgle:LineSegment
                    End="97.9166666666667,28.408262454435" />
                  <mssgle:CubicBezierSegment
                    Point1="97.9166666666667,28.408262454435"
                    Point2="101.916666666667,28.408262454435"
                    Point3="101.916666666667,32.408262454435" />
                  <mssgle:LineSegment
                    End="101.916666666667,62.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="22.0553645833333,33.408262454435,57.8059375,11.0625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\stored_result">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\stored_result_column">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>